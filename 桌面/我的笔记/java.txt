****************************************************************************************************
【java主类结构】
面向对象
基本组成单位：类
类：属性 方法
每一个程序必须包含一个main（）方法，主类
项目item  包number  类frist
package number;		包声明
public class first{	类
	static String s1="你"	全局变量  类的属性
	public权限修饰符 static静态修饰符 void返回值修饰符 main(String[]args参数){	主方法{开始}结束
	String s2="java";	局部变量
	System.out.printIn(s2);
	}
}
【变量和常量的命名必须使用合法的标识符】
声明变量 
变量的内存配置：程序执行时，程序代码加载到内存中的程序区Program,数据暂时储存在数据区
【】
public class Part{		类
	static final double PI=3.14;	声明常量PI，不对PI赋值，会错误
	static int age=23;	声明常量int型age并赋值
	public static void main(String[]args){
		final int number;
		number=1234;
		age=22;
		Systerm.out.printle("常量PI的值为"+PI);
		Systerm.out.printle(int型变量的值为："+age);
	}
}
【成员变量】
class var{
static int y=9;	静态变量:类变量，有效范围可以跨类，能以“类名.静态变量”的方法在其他类内使用
int x=3;	实例变量：
}
局部与成员变量同名时，成员变量被影藏。成员变量在此方法中失效
【】【运算符】
用于数学函数，赋值语句，逻辑计较
赋值、算术，比较
【赋值】
二元运算符（对两个操作数作处理）
左边：变量
右边：任意表达式，变量/常量/有效的表达式
赋值运算符	一个表达式中含有两个以上的=，从最右方的=开始处理
x=y=z=5;变量都得到相同的值
【算术】
【++/--】
单目运算符
【比较】
【逻辑】
&&左	||左	！右到左
结果为boolean型的变量或表达式可以通过逻辑运算符组合为逻辑表达式
&&当两个表达式都为true，结果才会是true，当第一个表达式为false时则不去判断第二个表达式，直接输出结果。可节省计算机的判断次数。
【位运算符】
左移：<<左边移空的部分补0
右移：>>右边位被抛弃，最高位0，左移空位补0，最高位1，左移空位补1，
无符号右移：>>>左移空位补0
移位能实现整数除或乘2^n的效果，y>>1 y/2
【】【优先级】
		[括号]
		[正负号]
【增量、减量】	[一元运算符]++ -- ！
【算数】	[乘除]
		[加减]
【比较】	[比较大小]
		[比较是否相等]
【逻辑】	[按位与]
		[按位亦或]
		[按位或]
		[逻辑与]
		[逻辑或]
		[三元]
【赋值】	
【】【数据类型转换】
低/高精度数据类型 
【代码规范】
声明变量是，使每个变量的声明单独占一行
【】
注意变量的有效范围，否则会编译错误或浪费内存
***********************************************************************************************************************************
1【复合语句/块语句】{自上而下执行{嵌套}}
2【条件语句】
【求绝对值】
if(a>0)
	b=a;
else 
	b=-a;
b=a>0?a:-a; 三元运算的好处，使代码简洁，且有一个返回值
条件表达式 可由多个表达式组成，但最后返回的结果一定要为Boolean型
【switch】
首先计算表达式的值，如和某个case后的变量值相同，执行case后的若干语句，直至遇到break语句为止。
switch(表达式){		//表达式中值必须是整型或字符型
	case 常量值1；	//常量值必须是整型或字符型
		语句块1
		[break;]
	...
	case 常量值n；
		语句块n
		[break;]
	default;
		语句块n
		[break;]
}
int week=2;
switch (week){
case 1:
	System.out.printIn("M");
	break;
case 2:
	System.out.printIn("T");
	break;
default:
	System.out.printIn("S");
}
*********
case语句后常量表达式的值绝不可以是实数，字符串
case 1.1;
case "ok";
【while】
错误，while表达式的括号后加；。
while(x==5);
System.out.printIn("x的值为5")；
这时程序认为要执行一条空语句，而进入无限循环，
【】
使用for循环的特殊语法格式来实现无限循环
for(;;){
	if(x<20)
	break;
	x++;
}
foreach遍历数组
**********************************************************************************
【】【】【】【类的构造方法】
【String/char】
声明字符串
String str=[null]

将字符串作为对象来管理，因此创建字符串可以像创建其他类对象一样来创建字符串对象（类/对象）创建对象要使用类的构造方法。
【】String(char a[])
char a[]={"g""o""o""d"};
String s=new String(a)
String s=new String("good")
【】String(char a[],int offset,int length)
char a[]={"s""t""u""d""e""n""t"};
String s=new String(a,2,4);
String s=new String("uden")
【】String(char[] value)
char a[]={"s""t""u""d""e""n""t"};
String s=new String(a）；
String s=new String("sudent")
【】【】
除了以上通过使用String类的构造方法创建字符串变量外，还可通过字符串常量的引用赋值给字符串变量
String str;
str="we"
【】【】
String s1=new String("h")
************************************************************************************************************
【对象】
预处理问题抽象为对象
将属性和行为封装起来以描述类
类实质是封装对象属性、行为的载体，对象是类抽象出来的一个载体
鸟类 人类
类是世间万物的抽象称呼，而对象是这个事物对应的实体。面对实际问题，只能用实例化类对象来解决
[][][][]类中对象的行为以方法的形式定义，对象的属性以成员变量的形式定义
【】
封装：隐藏内部数据
继承：鸽子类 鸟类 保留鸟类的属性行为，添加其独特属性行为
多态：事件处理依赖父类的方法，调用父类的方法即可，具有 能力。
	方法“绘制图形”执行“绘制图形”，没人知道该画什么
	抽象类，接口
【类】
【成员变量】对象的属性
public class Book{			使用关键字class定义类
	private int id;			定义成员变量
	private String name;
	public String getName(){	定义getName()方法
		int id=0;		局部变量
		setName("Java");	调用类中的其他方法
		return id+this.name;
	}
	private void setName(String name){
		this.name=name;		将参数赋给类中的成员变量
	}
}
【成员方法】
权限修饰符 返回值类型 方法名（参数类型 参数名）{	/*参数：对象/变量		无返回值：void  */
	...//方法体
	return 返回值；		数值 对象 
}
【权限修饰符】
private public protected
【this关键字】
成员变量与setname()方法中的形参名字相同，如何区分使用的是哪一个变量？
this关键字被隐式的用于引用对象的成员变量和方法。
this调用成员变量和成员方法
对象.成员变量	对象.成员方法		this与对象之间关系	this引用就是对对象的引用
this可省略，this还可作为方法的返回值
【类的构造方法】
类  成员方法/构造方法
构造方法是一个与类同名的方法，对象的创建就是通过构造方法，实例化一个对象时，类都会自动调用构造方法。
1 没有返回值  2 与本类名称相同
public book(){} public:构造方法的名称 book：构造方法的名称
如类中
【】


